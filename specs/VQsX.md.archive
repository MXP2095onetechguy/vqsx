 VQsX is a modern vector engine inspired and based of Atari's Quadrascan color vector graphics engine. Its a bytecode and machine procedural based vector engine, where each instruction in the bytecode tell the vector engine how to draw.

## Internal details

### Registers and architecture

The vector engine is designed to execute programs from memory such as RAM. Its an 8-bit-worded little-endian machine, with 64-bit addressing. 

The instructions are variable-length, where the first byte is read as the instruction before fetching n-more bytes as the operands depending on the instruction fetched.

The vector engine is also a two's complement and IEEE 754 vector engine. Despite the vector engine being 8-bit-worded, it is capable of doing 64-bit arithmetic and floating point math, with its integer size being 64-bits.

The vector engine also has internal RAM inaccessible to the external hardware, that is simply responsible for storing the stacks. This stack RAM is not accessible by the external hardware, neither is it directly usable by the vector program. It may only be manipulated with stack manipulation operations.

It has the following registers that can be used for both the programs and the accompanying and surrounding external hardware

| Name                        | Mnemonic | Internal | Description|
| --------------------------- | -------- | -------- ||
| Instruction Program Counter | IPC      | Yes      | This register acts as the program counter. Its internal, but can be used by the vector program for jump and calls. Its read-only to the external hardware, but can be manipulated thru the jump and calls.                                                                                                                                                                                                                                                                                                                                                                                                      |
| Memory Start                | MST      | Yes      | This register is used to act as storage for the location of the start of the program. Its internal, but can be used by the vector program for jump and calls. IPC is initially set to MST when the vector engine is first run.                                                                                                                                                                                                                                                                                                                                                                                  |
| CurrentInstruction          | CIR      | Yes      | This extremly internal register is used to store the current instruction pointed to by|
| Status                      | STS      | No       | This read-only 8-bit register is used for checking the status of the vector engine such as halted, or waiting for a NEXT signal. Its not accesible to the vector program, but to the external hardware running the vector engine.                                                                                                                                                                                                                                                                                                                                                                               |
| Goexec                      | GEX      | No       | This write-only register is the register that needs to be written with the starting address of the vector program to be executed when you want to start the vector engine. MST is set to the address written to GEX, and consequently IPC is also set to GEX. The stack is also cleared, and the pen state is initialized to the default values. Basically INITIALIZE is run when GEX is first written so you don't need to explicitly write an INITIALIZE instruction at thes start. This register does nothing when written while the vector engine is running, including when its waiting for a NEXT signal. |

Here are the specific details of the Status register (where bit 0 is LSB):

| Bit | Description                                                                                                                                                                                                                                          |
| --- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 0   | This register is used to check whether the vector engine is halted. If 1, its halted.                                                                                                                                                                |
| 1   | This register is used to check whether the vector engine is waiting for a NEXT signal. If 1, its waiting for a NEXT signal.                                                                                                                          |
| 2   | This register is used to check whether the vector engine was halted due to a fault (such as a bad instruction call and stack faults). If 1, the vector engine has halted due to a fault and not the user's own instruction or the external hardware. |
| 3-8 | Reserved.                                                                                                                                                                                                                                            |

Here are the important pins (not exhaustive) that the vector engine will have if its built as a real hardware vector engine:

| Name     | Description                                                                                                                                     |
| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| TRIGNEXT | A pin that is set high to trigger a NEXT signal                                                                                                 |
| CLOCK    | A pin that just needs to have its value change (HIGH to LOW, LOW to HIGH) to clock the vector engine. It works on both rising and falling edge. |
| HALT     | A pin that is set to high to halt the vector engine.                                                                                            |

The vector engine has the following stack for runtime purposes: 

| Name           | Description                                                                       |
| -------------- | --------------------------------------------------------------------------------- |
| State stack    | A stack used to manage the pen's state. This does not include the pen's position. |
| Position stack | A stack used to manage the pen's position.                                        |
| Call stack     | A stack used to manage the vector engine's subroutine calls.                      |

All these stacks are stored in the internal stack RAM. This means that the stack

Here are the default pen states for initialization whether through GEX or INITIALIZE:

| StateZ            | Description                                                               | Initial value (integer, or what value the programmer would give to their coresponding instructions) |
| ----------------- | ------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |
| Rotational Origin | What direction is the origin (0 degrees).                                 | 1                                                                                                   |
| Positional Origin | What position of the drawing area is the origin (0, 0).                   | 1                                                                                                   |
| Position          | What position is the pen currently in.                                    | (0, 0)                                                                                              |
| Color             | What is the pen's current color.                                          | 13                                                                                                  |
| Scale             | What is the pen's current scale factor (unit of screen coordinate point). | 1                                                                                                   |
| Brightness        | What is the pen's current brightness.                                     | 10                                                                                                  |





### Instruction set

| Name            | Mnemonic | Opcode | Operand    | Description                                                                                                                                                                                                                                                                                                              |
| --------------- | -------- | ------ | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| Position        | POS      | 0x00   | x, y       | Set the pen's position to **x** and **y** relative to the origin.                                                                                                                                                                                                                                                        |
| CENTER          | CNTR     | 0x01   | -          | Center the pen's position to the center of the drawing area, no matter the origin.                                                                                                                                                                                                                                       |
| ORIGIN          | ORI      | 0x02   | -          | Set the pen's position to the current origin set.                                                                                                                                                                                                                                                                        |
| SETORIGIN       | SORI     | 0x03   | oripos     | Set the pen's origin to a new location. **oripos** is an index value from 0-2, where any other values would halt with a fault. **oripos** will be discussed in-depth in a later table.                                                                                                                                   |
| BRIGHTNESS      | BRI      | 0x04   | brightness | Set's the pen brightness value to **brightness** where 0 means total darkness (black) or 10 means full color (maximum and color). The default brightness is 10. If the value is above 10 or below 0, the vector engine halts with a fault.                                                                               |
| SCALE           | SCL      | 0x05   | factor     | Scale the pen's drawing size by a factor that has a unit of a single coordinate point. The default scale is 1.                                                                                                                                                                                                           |
| COLOR           | CLR      | 0x06   | index      | Changes the pen's color using an indexed-color method. **index** is an 8-bit value determining the index of the color. **index** will be discussed in-depth in a later table.                                                                                                                                            |
| DRAW            | DRAW     | 0x07   | x2, y2     | Draws a line from the current position to the specified (**x2**, **y2**) coordinates.                                                                                                                                                                                                                                    |
| FORWARD         | FWD      | 0x08   | dist       | Moves the pen forward by the specified distance in the current direction. **dist** has a unit of a single coordinate point.                                                                                                                                                                                              |
| BACKWARDS       | BWD      | 0x09   | dist       | Moves the pen backward by the specified distance. **dist** has a unit of a single coordinate point.                                                                                                                                                                                                                      |
| ROTATEDEG       | ROTD     | 0x0A   | angle      | Rotates the pen clockwise by the specified angle (in degrees) relative to the 0 degree origin.                                                                                                                                                                                                                           |
| ROTATERAD       | ROTR     | 0x0B   | angle      | Rotates the pen by the specified angle (in radians) in relative to the 0 degree origin.                                                                                                                                                                                                                                  |
| ROTATERDEG      | ROTRD    | 0x0C   | angle      | Rotates the pen clockwise by the specified angle (in degrees) relative to the current direction of the pen. **angle** may be negative for this instruction, which causes the pen's direction to rotate anti-clockwise.                                                                                                   |
| ROTATERRAD      | ROTRR    | 0x0D   | angle      | Rotates the pen clockwise by the specified angle (in radians) relative to the current direction of the pen. **angle** may be negative for this instruction, which causes the pen's direction to rotate anti-clockwise.                                                                                                   |
| ROTATEORIGIN    | ROTO     | 0x0E   | -          | Set the pen's current angle to the 0 degree origin.                                                                                                                                                                                                                                                                      |
| ROTATESETORIGIN | ROTSO    | 0x0F   | orirot     | Changes the pen's 0 degree origin. **orirot** will be discussed in-depth in a later table.                                                                                                                                                                                                                               |
| STPUSH          | STPUSH   | 0x10   | -          | Pushes the current pen's state to the stack. This does not include the pen's position or its origin. If the stack overflows while pushing, the vector engine halts with a fault.                                                                                                                                         |
| STPOP           | STPOP    | 0x11   | -          | Pops the pen's state of the stack and sets the popped value as the new pen state. If the stack underflows or the stack is empty when popped, the vector engine halts with a fault.                                                                                                                                       |
| PSPUSH          | PSPUSH   | 0x12   | -          | Saves the pen position (current x, y) to a stack. If the stack overflows while pushing, the vector engine halts with a fault.                                                                                                                                                                                            |
| PSPOP           | PSPOP    | 0x13   | -          | Restores the pen position from the stack and then popping the value off the stack. If the stack underflows or the stack is empty when popped, the vector engine halts with a fault.                                                                                                                                      |
| INITIALIZE      | INIT     | 0x14   | -          | Reset the pen's state (not including position) back to its original state. The original state is the state when the vector engine is first starting to execute but before any instructions are executed.                                                                                                                 |
| JUMP            | JMP      | 0x15   | addr       | Jumps the vector engine to **addr**.                                                                                                                                                                                                                                                                                     |
| CALL            | CALL     | 0x16   | addr       | Calls the subroutine at **addr**. RETURN is used to jump back to the call instruction. If the call stack overflows while calling a subroutine, the vector engine halts with a fault.                                                                                                                                     |
| JUMPIPC         | JIPC     | 0x17   | offset     | Jumps the vector engine to the address of **IPC** with an offset of **offset**. **offset** may be a negative integer, which specifies that its IPC-**offset**.                                                                                                                                                           |
| CALLIPC         | CIPC     | 0x18   | offset     | calls the vector engine to the address of **IPC** with an offset of **offset**. **offset** may be a negative integer, which specifies that its IPC-**offset**. It otherwise behaves similarly to CALL.                                                                                                                   |
| JUMPMST         | JMST     | 0x19   | offset     | Jumps the vector engine to the address of **MST** with an offset of **offset**. **offset** may be a negative integer, which specifies that its MST-**offset**.                                                                                                                                                           |
| CALLMST         | CMST     | 0x1A   | offset     | Calls the vector engine to the address of **MST** with an offset of **offset**. **offset** may be a negative integer, which specifies that its MST-**offset**. It otherwise behaves similarly to CALL.                                                                                                                   |
| RETURN          | RET      | 0x1B   | -          | Returns from a call instruction. If the call stack is empty (No subroutine calls) when RETURN is called, then the vector engine halts with a fault.                                                                                                                                                                      |
| HALT            | HALT     | 0x1C   | -          | Halts the vector engine.                                                                                                                                                                                                                                                                                                 |
| WAITNEXT        | WNXT     | 0x1D   | -          | Makes the vector engine sleep until the NEXT signal is triggered, and then continuing from before once the NEXT signal is triggered. This is useful if the external hardware needs to make changes to the vector program without stopping such as updating graphics without risking race conditions and drawing garbage. |
| No-operation    | NOP      | 0x1C   | -          | A no-operation instruction.                                                                                                                                                                                                                                                                                              |


This is the table for the ORIGIN origin index:

| Value | Origin                        |
| ----- | ----------------------------- |
| 0     | Top left as origin (0, 0).    |
| 1     | Center as origin (0, 0).      |
| 2     | Bottom left as origin (0, 0). |


This is the table for the COLOR index: 

| Value (8-bits) | Color                 | Hex (RGB) |
| -------------- | --------------------- | --------- |
| 0              | Bright Red            | \#FF5555  |
| 1              | Bright Green          | \#55FF55  |
| 2              | Bright Blue           | \#5555FF  |
| 3              | Bright Yellow         | \#FFFF55  |
| 4              | Bright Magenta        | \#FF55FF  |
| 5              | Bright Cyan           | \#55FFFF  |
| 6              | Bright Orange         | \#FFAA55  |
| 7              | Bright Pink           | \#FF69B4  |
| 8              | Bright Lime           | \#AAFF55  |
| 9              | Bright Sky Blue       | \#55AAFF  |
| 10             | Bright Purple         | \#AA55FF  |
| 11             | Bright Teal           | \#55FFAA  |
| 12             | Azure                 | \#F0FFFF  |
| 13             | Bright White          | \#FFFFFF  |
| 14             | Bright Beige          | \#FFDD99  |
| 15             | Lavender              | \#E6E6FA  |
| 16             | Fuchsia               | \#FF00FF  |
| 17             | Olive                 | \#808000  |
| 18             | Brown                 | \#8B4513  |
| 19             | Light Brown           | \#BC8F8F  |
| 20             | Tan                   | \#D2B48C  |
| 21-255         | Bright Red (Reserved) | \#FF55555 |

This is the table for the ROTATESETORIGIN origin index: 

| Value | Color                                                                 |
| ----- | --------------------------------------------------------------------- |
| 0     | East/Right as origin (0 degrees). Physics-accurate origin.            |
| 1     | North/Up as origin (0 degrees). Mathematics/Bearings-accurate origin. |

## Assembly Language

The VQsX vector engine has its own assembler for assembling vector programs. Its not as powerful as writing directly the vector bytecode, but allows the code to be simpler.

The assembly language contains features not present in the vector engine itself, such as labels. Its also simpler as there is only one JUMP and CALL instructions; Its up to the assembler to decide which to use.

The VQsX assembly language assembler source files is recommended to have the file extension of **.vS**.

A valid identifier is any string that starts with an alphabetical character or an underscore, and may contain alphanumerical characters and underscores. **_a** and **a1** are valid identifiers while **1a** and **a+c** are invalid identifiers.

The assembly language has labels, which are valid identifiers that ends with a ":" to signify it as a label. The labels may not have any indentation.

Each instruction mnemonic must be indented by 1 tab or 4 spaces to signify it as an instruction instead of a label. The instructions must be a valid mnemonic or full name. Each instruction must be on their own line and may be terminated with a semicolon (**;**).

A comment starts with a "#" and may be anywhere.

```
# VQsX Assembly Program to Draw a Square

START:                 # Main program label
    INIT;              # Initialize pen states
    SETORIGIN 0;      # Set origin to top-left
    COLOR 1;          # Set pen color to Bright Green
    BRIGHTNESS 10;    # Set pen brightness to maximum

    CALL DRAW_SQUARE;  # Call subroutine to draw a square

    HALT;              # Halt the execution

# Subroutine to draw a square
DRAW_SQUARE:          # Subroutine label
    STPUSH             # Save current pen state
    POS 50, 50         # Move to the starting position (50, 50)

    # Draw the four sides of the square
    FORWARD 100        # Move forward 100 units
    ROTATEDEG 90      # Rotate 90 degrees clockwise
    FORWARD 100        # Move forward 100 units
    ROTATEDEG 90      # Rotate 90 degrees clockwise
    FORWARD 100        # Move forward 100 units
    ROTATEDEG 90      # Rotate 90 degrees clockwise
    FORWARD 100        # Move forward 100 units

    STPOP              # Restore pen state
    RETURN             # Return to the main program


```

> created on October 27, 2024